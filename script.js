document.addEventListener('DOMContentLoaded', function() {

    // --- Language and Translations ---
    let currentLanguage = 'zh';
    const translations = {
        en: {
            'page-title': 'LLM Carbon Footprint Calculator',
            'main-title': 'LLM Carbon Footprint Calculator',
            'sub-title': 'Integrated Carbon Emission Calculation for LLM Training, Inference, and Hardware Lifecycle',
            'developer-credit': 'Developed By Tzu-Hsuan Huang',
            'tab-lca': 'AI Chip LCA',
            'tab-training': 'LLM Training Emissions',
            'tab-inference': 'LLM Inference Emissions',
            'lca-settings-title': 'Parameter Settings',
            'lca-chip-model-label': 'Select AI Chip Model',
            'lca-lifespan-label': 'Estimated Lifespan (years)',
            'lca-lifespan-tooltip': 'The typical operational life of an AI chip in a data center or server environment, usually 5 years.',
            'lca-utilization-label': 'Daily Operating Hours',
            'lca-utilization-tooltip': 'The average time an AI chip spends on training or inference tasks per day. The recommended value is 24 hours.',
            'lca-carbon-intensity-label': 'Grid Carbon Intensity (kgCO₂e/kWh)',
            'lca-carbon-intensity-tooltip': 'The amount of carbon emissions produced per kilowatt-hour of electricity generated. The 2022 average for Taiwan is approx. 0.416 kgCO₂e/kWh.',
            'calculateLcaBtn': 'Calculate',
            'lca-results-title': 'Calculation Results',
            'lca-total-co2-label': 'Total Carbon Footprint',
            'lca-total-co2-tooltip': 'Total greenhouse gas emissions produced by the chip throughout its lifecycle, including manufacturing and operation.',
            'lca-water-label': 'Water Consumption',
            'lca-water-tooltip': 'Total water consumed during the manufacturing and operational phases of the chip\'s lifespan.',
            'lca-ewaste-label': 'E-Waste',
            'lca-ewaste-tooltip': 'The weight of waste generated by the chip at the end of its life, usually referring to the product\'s own weight.',
            'lca-breakdown-title': 'Carbon Emission Breakdown',
            'lca-op-co2-label': 'Operational Emissions',
            'lca-op-co2-tooltip': 'Carbon emissions generated from electricity consumption during the chip\'s operation.',
            'lca-em-co2-label': 'Embodied Emissions',
            'lca-em-co2-tooltip': 'Carbon emissions generated during the chip\'s manufacturing, transportation, and disposal phases.',
            'lca-equivalents-title': 'Daily Equivalents',
            'training-settings-title': 'Parameter Settings',
            'training-model-settings-title': '1. LLM Model Settings',
            'training-preset-label': 'Model Preset',
            'training-model-type-label': 'Model Type',
            'training-model-type-dense': 'Dense',
            'training-model-type-moe': 'MoE (Mixture of Experts)',
            'training-total-params-label': 'Total Parameters (B)',
            'training-total-params-tooltip': 'The total number of parameters in the model, in billions (B).',
            'training-base-params-label': 'Base Model Parameters (B)',
            'training-base-params-tooltip': 'For MoE models, the number of parameters in the corresponding dense base model.',
            'training-tokens-label': 'Tokens Processed (B)',
            'training-tokens-tooltip': 'The total number of tokens processed by the model during training or inference, in billions (B).',
            'training-hardware-settings-title': '2. Hardware & Data Center Settings',
            'training-device-label': 'Compute Device',
            'training-device-custom': 'Custom',
            'training-device-num-label': 'Number of Devices',
            'training-power-label': 'Avg. System Power (W/device)',
            'training-power-tooltip': 'The average total power consumption per compute device, including host, memory, etc.',
            'training-efficiency-label': 'Hardware Efficiency (%)',
            'training-efficiency-tooltip': 'The percentage of actual computational throughput relative to the theoretical peak throughput.',
            'training-pue-label': 'PUE',
            'training-pue-tooltip': 'Power Usage Effectiveness. The ratio of total data center energy consumption to IT equipment energy consumption. The closer to 1, the higher the efficiency.',
            'training-ci-label': 'Carbon Intensity (kgCO₂eq/kWh)',
            'training-ci-tooltip': 'The kilograms of carbon dioxide equivalent produced per kilowatt-hour (kWh) consumed by the data center. Default is the US average.',
            'training-cost-label': 'GPU Unit Cost ($/hour)',
            'training-cost-tooltip': 'The computational cost per GPU per hour. The default value is based on Microsoft Azure V100 pay-as-you-go pricing.',
            'calculateTrainingBtn': 'Calculate',
            'training-results-title': 'Calculation Results',
            'training-co2-label': 'Training Emissions',
            'training-co2-tooltip': 'Carbon emissions generated from electricity consumption during model training.',
            'training-energy-label': 'Total Energy Consumed',
            'training-energy-tooltip': 'The total amount of electricity consumed by the data center during model training.',
            'training-duration-label': 'Est. Training Time',
            'training-duration-tooltip': 'The total time required to complete model training.',
            'training-cost-est-label': 'Est. Training Cost',
            'training-cost-est-tooltip': 'The hardware rental cost required for model training (USD).',
            'training-equivalents-title': 'Daily Equivalents',
            'inf-settings-title': 'Parameter Settings',
            'inf-model-settings-title': '1. LLM Model Settings',
            'inf-preset-label': 'Select Model Preset',
            'inf-preset-custom': 'Custom',
            'inf-tokens-label': 'Tokens Processed',
            'inf-tokens-tooltip': 'Default token counts based on common task types.',
            'inf-task-rag': 'Q&A (RAG) (approx. 5k tokens)',
            'inf-task-translation': 'Translation (approx. 50k tokens)',
            'inf-task-code': 'Code Gen/Debug (approx. 20k tokens)',
            'inf-task-summary': 'Summarization (approx. 150k tokens)',
            'inf-model-type-label': 'Model Type',
            'inf-model-type-dense': 'Dense',
            'inf-model-type-moe': 'MoE (Mixture of Experts)',
            'inf-total-params-label': 'Total Parameters (B)',
            'inf-total-params-tooltip': 'The total number of parameters in the model, in billions (B).',
            'inf-base-params-label': 'Base Model Parameters (B)',
            'inf-base-params-tooltip': 'For MoE models, the number of parameters in the corresponding dense base model.',
            'inf-hardware-settings-title': '2. Hardware & Data Center Settings',
            'inf-device-label': 'Compute Device',
            'inf-device-custom': 'Custom',
            'inf-device-num-label': 'Number of Devices',
            'inf-power-label': 'Avg. System Power (W/device)',
            'inf-power-tooltip': 'The average total power consumption per compute device, including host, memory, etc.',
            'inf-efficiency-label': 'Hardware Efficiency (%)',
            'inf-efficiency-tooltip': 'The percentage of actual computational throughput relative to the theoretical peak throughput.',
            'inf-pue-label': 'PUE',
            'inf-pue-tooltip': 'Power Usage Effectiveness. The ratio of total data center energy consumption to IT equipment energy consumption. The closer to 1, the higher the efficiency.',
            'inf-ci-label': 'Carbon Intensity (gCO₂eq/kWh)',
            'inf-ci-tooltip': 'The grams of carbon dioxide equivalent produced per kilowatt-hour (kWh) consumed by the data center. Default is the US average.',
            'calculateInferenceBtn': 'Calculate',
            'inf-results-title': 'Calculation Results',
            'inf-total-co2-label': 'Total Carbon Footprint (gCO₂eq)',
            'inf-total-co2-tooltip': 'Total carbon emissions generated from electricity consumption during the model inference task.',
            'inf-details-title': 'Details',
            'inf-time-label': 'Est. Inference Time',
            'inf-time-tooltip': 'The total time required to complete the inference.',
            'inf-energy-label': 'Total Energy Consumed',
            'inf-energy-tooltip': 'The total amount of electricity consumed by the data center during model inference.',
            'inf-equivalents-title': 'Daily Equivalents',
            'unit_days': 'days',
            'unit_years': 'years',
            'unit_ms': 'ms',
            'unit_s': 's',
            'unit_min': 'min',
            'unit_hr': 'hr',
            'alert_invalid_input': 'Please enter valid numbers.',
            'chart_op_label': 'Operational Emissions',
            'chart_em_label': 'Embodied Emissions',
            'chart_title': 'Carbon Footprint Composition (tCO₂eq)',
            'model_preset_custom_name': 'Custom Model',
        },
        zh: {
            'page-title': 'LLM 碳足跡評估工具',
            'main-title': 'LLM 碳足跡評估工具',
            'sub-title': '整合 LLM 訓練、推論及硬體生命週期的碳排計算',
            'developer-credit': 'Developed By 黃子瑄',
            'tab-lca': 'AI 晶片 LCA',
            'tab-training': 'LLM 訓練碳排',
            'tab-inference': 'LLM 推論碳排',
            'lca-settings-title': '參數設定',
            'lca-chip-model-label': '選擇 AI 晶片模型',
            'lca-lifespan-label': '預估使用年限 (年)',
            'lca-lifespan-tooltip': 'AI 晶片在資料中心或伺服器環境中的典型運作壽命，通常為 5 年。',
            'lca-utilization-label': '每日運作時數 (小時)',
            'lca-utilization-tooltip': 'AI 晶片在一天中進行訓練或推論任務的平均時間，建議值為 24 小時。',
            'lca-carbon-intensity-label': '電網碳強度 (kgCO₂e/kWh)',
            'lca-carbon-intensity-tooltip': '每產生一度電所產生的碳排放量。台灣 2022 年平均值約為 0.416 kgCO₂e/kWh。',
            'calculateLcaBtn': '開始計算',
            'lca-results-title': '計算結果',
            'lca-total-co2-label': '總碳足跡',
            'lca-total-co2-tooltip': '晶片在整個生命週期中產生的溫室氣體總排放量，包含製造與運作階段。',
            'lca-water-label': '水資源消耗',
            'lca-water-tooltip': '晶片在其使用壽命內，於製造及運作過程中消耗的總水量。',
            'lca-ewaste-label': '電子廢棄物',
            'lca-ewaste-tooltip': '晶片在生命週期結束後產生的廢棄物重量，通常指產品本身的重量。',
            'lca-breakdown-title': '碳排細項分析',
            'lca-op-co2-label': '營運碳排',
            'lca-op-co2-tooltip': '晶片在運作期間，因電力消耗所產生的碳排。',
            'lca-em-co2-label': '隱含碳排',
            'lca-em-co2-tooltip': '晶片在製造、運輸及棄置階段所產生的碳排。',
            'lca-equivalents-title': '日常換算',
            'training-settings-title': '參數設定',
            'training-model-settings-title': '1. LLM 模型設定',
            'training-preset-label': '模型預設',
            'training-model-type-label': '模型類型',
            'training-model-type-dense': 'Dense (密集模型)',
            'training-model-type-moe': 'MoE (專家混合模型)',
            'training-total-params-label': '總參數數量 (B)',
            'training-total-params-tooltip': '模型的總參數數量，單位為十億 (Billion)。',
            'training-base-params-label': '基礎模型參數 (B)',
            'training-base-params-tooltip': '對於 MoE 模型，其對應的密集基礎模型參數數量。',
            'training-tokens-label': '處理 Token 數量 (B)',
            'training-tokens-tooltip': '模型在訓練或推論過程中處理的 Token 總數，單位為十億 (Billion)。',
            'training-hardware-settings-title': '2. 硬體與資料中心設定',
            'training-device-label': '運算裝置',
            'training-device-custom': '自訂',
            'training-device-num-label': '裝置數量',
            'training-power-label': '平均系統功耗 (W/裝置)',
            'training-power-tooltip': '每台運算裝置（包含主機、記憶體等）的平均總功耗。',
            'training-efficiency-label': '硬體效率 (%)',
            'training-efficiency-tooltip': '實際運算吞吐量相對於理論峰值吞吐量的百分比。',
            'training-pue-label': 'PUE',
            'training-pue-tooltip': '電力使用效率 (Power Usage Effectiveness)，資料中心總耗能與 IT 設備耗能的比值，越接近 1 效率越高。',
            'training-ci-label': '碳強度 (kgCO₂eq/kWh)',
            'training-ci-tooltip': '資料中心每消耗一度電（kWh）所產生的二氧化碳當量(公斤)。預設值為美國平均。',
            'training-cost-label': 'GPU 單位成本 ($/小時)',
            'training-cost-tooltip': '單一 GPU 每小時的運算成本。預設值參考 Microsoft Azure V100 隨用隨付價格。',
            'calculateTrainingBtn': '開始計算',
            'training-results-title': '計算結果',
            'training-co2-label': '訓練碳排',
            'training-co2-tooltip': '模型訓練期間，因電力消耗所產生的碳排。',
            'training-energy-label': '總消耗電量',
            'training-energy-tooltip': '模型訓練期間，資料中心總共消耗的電量。',
            'training-duration-label': '預估訓練時間',
            'training-duration-tooltip': '模型完成訓練所需的總時間。',
            'training-cost-est-label': '預估訓練成本',
            'training-cost-est-tooltip': '模型訓練期間所需的硬體租用成本 (USD)。',
            'training-equivalents-title': '日常換算',
            'inf-settings-title': '參數設定',
            'inf-model-settings-title': '1. LLM 模型設定',
            'inf-preset-label': '選擇預設模型',
            'inf-preset-custom': '自訂',
            'inf-tokens-label': '處理 Token 數量',
            'inf-tokens-tooltip': '根據常見任務類型預設的 Token 數量。',
            'inf-task-rag': '問答 (RAG) (約 5k tokens)',
            'inf-task-translation': '翻譯 (約 50k tokens)',
            'inf-task-code': '程式碼生成/Debug (約 20k tokens)',
            'inf-task-summary': '文件摘要 (約 150k tokens)',
            'inf-model-type-label': '模型類型',
            'inf-model-type-dense': 'Dense (密集模型)',
            'inf-model-type-moe': 'MoE (專家混合模型)',
            'inf-total-params-label': '總參數數量 (B)',
            'inf-total-params-tooltip': '模型的總參數數量，單位為十億 (Billion)。',
            'inf-base-params-label': '基礎模型參數 (B)',
            'inf-base-params-tooltip': '對於 MoE 模型，其對應的密集基礎模型參數數量。',
            'inf-hardware-settings-title': '2. 硬體與資料中心設定',
            'inf-device-label': '運算裝置',
            'inf-device-custom': '自訂',
            'inf-device-num-label': '裝置數量',
            'inf-power-label': '平均系統功耗 (W/裝置)',
            'inf-power-tooltip': '每台運算裝置（包含主機、記憶體等）的平均總功耗。',
            'inf-efficiency-label': '硬體效率 (%)',
            'inf-efficiency-tooltip': '實際運算吞吐量相對於理論峰值吞吐量的百分比。',
            'inf-pue-label': 'PUE',
            'inf-pue-tooltip': '電力使用效率 (Power Usage Effectiveness)，資料中心總耗能與 IT 設備耗能的比值，越接近 1 效率越高。',
            'inf-ci-label': '碳強度 (gCO₂eq/kWh)',
            'inf-ci-tooltip': '資料中心每消耗一度電（kWh）所產生的二氧化碳當量。預設值為美國平均。',
            'calculateInferenceBtn': '開始計算',
            'inf-results-title': '計算結果',
            'inf-total-co2-label': '總碳足跡 (gCO₂eq)',
            'inf-total-co2-tooltip': '模型在推論任務中，因電力消耗所產生的總碳排。',
            'inf-details-title': '詳細資訊',
            'inf-time-label': '預估推論時間',
            'inf-time-tooltip': '模型完成推論所需的總時間。',
            'inf-energy-label': '總消耗電量',
            'inf-energy-tooltip': '模型推論期間，資料中心總共消耗的電量。',
            'inf-equivalents-title': '日常換算',
            'unit_days': '天',
            'unit_years': '年',
            'unit_ms': '毫秒',
            'unit_s': '秒',
            'unit_min': '分鐘',
            'unit_hr': '小時',
            'alert_invalid_input': '請輸入有效的數值。',
            'chart_op_label': '營運碳排',
            'chart_em_label': '隱含碳排',
            'chart_title': '碳足跡組成 (tCO₂eq)',
            'model_preset_custom_name': '自訂模型',
        },
    };
    const equivalentsData = {
        en: {
            lca: {
                flight: { name: 'Taipei-Tokyo flights', value: 0.4, icon: `✈️`, tooltip: 'Carbon emissions from a round-trip flight between Taipei and Tokyo.' },
                car: { name: 'cars\' annual emissions', value: 1.9, icon: `🚗`, tooltip: 'Average annual carbon emissions from a typical passenger car.' },
                tree: { name: 'trees\' annual absorption', value: 0.012, icon: `🌳`, tooltip: 'Total amount of carbon dioxide a single tree can absorb in a year.' },
                bento: { name: 'pork chop bento boxes', value: 0.0015, icon: `🍱`, tooltip: 'Carbon emissions from the production to consumption of a pork chop bento box.' },
            },
            training: {
                flight: { name: 'Taipei-Tokyo flights', value: 0.4, icon: `✈️`, tooltip: 'Carbon emissions from a round-trip flight between Taipei and Tokyo.' },
                car: { name: 'cars\' annual emissions', value: 1.9, icon: `🚗`, tooltip: 'Average annual carbon emissions from a typical passenger car.' },
                tree: { name: 'trees\' annual absorption', value: 0.012, icon: `🌳`, tooltip: 'Total amount of carbon dioxide a single tree can absorb in a year.' },
                bento: { name: 'pork chop bento boxes', value: 0.0015, icon: `🍱`, tooltip: 'Carbon emissions from the production to consumption of a pork chop bento box.' },
            },
            inference: {
                'sms': { name: 'SMS messages', value: 0.014, icon: `💬`, tooltip: 'Average carbon footprint of one SMS message.' },
                'google_search': { name: 'Google searches', value: 0.2, icon: `🔍`, tooltip: 'Average carbon footprint of one Google search.' },
                'youtube_stream': { name: 'hours of YouTube streaming', value: 10, icon: `▶️`, tooltip: 'Average carbon footprint of streaming one hour of YouTube video.' },
                'video_conference': { name: 'hours of online meetings', value: 12, icon: `💻`, tooltip: 'Average carbon footprint of a one-hour online video conference.' },
            }
        },
        zh: {
            lca: {
                flight: { name: '趟台北-東京航班', value: 0.4, icon: `✈️`, tooltip: '一趟台北飛往東京的來回航班所產生的碳排。' },
                car: { name: '輛汽車年排碳', value: 1.9, icon: `🚗`, tooltip: '一輛普通家用汽車行駛一年所產生的平均碳排。' },
                tree: { name: '棵樹年吸碳量', value: 0.012, icon: `🌳`, tooltip: '一棵樹一年所能吸收的二氧化碳總量。' },
                bento: { name: '個排骨便當', value: 0.0015, icon: `🍱`, tooltip: '一個排骨便當從生產到消費所產生的碳排。' },
            },
            training: {
                flight: { name: '趟台北-東京航班', value: 0.4, icon: `✈️`, tooltip: '一趟台北飛往東京的來回航班所產生的碳排。' },
                car: { name: '輛汽車年排碳', value: 1.9, icon: `🚗`, tooltip: '一輛普通家用汽車行駛一年所產生的平均碳排。' },
                tree: { name: '棵樹年吸碳量', value: 0.012, icon: `🌳`, tooltip: '一棵樹一年所能吸收的二氧化碳總量。' },
                bento: { name: '個排骨便當', value: 0.0015, icon: `🍱`, tooltip: '一個排骨便當從生產到消費所產生的碳排。' },
            },
            inference: {
                'sms': { name: '個簡訊', value: 0.014, icon: `💬`, tooltip: '一則簡訊的平均碳排。' },
                'google_search': { name: '次 Google 搜尋', value: 0.2, icon: `🔍`, tooltip: '一次 Google 搜尋的平均碳排。' },
                'youtube_stream': { name: '小時 YouTube 串流', value: 10, icon: `▶️`, tooltip: '觀看一小時 YouTube 影片的平均碳排。' },
                'video_conference': { name: '小時線上會議', value: 12, icon: `💻`, tooltip: '一小時線上視訊會議的平均碳排。' },
            }
        }
    };

    function setLanguage(lang) {
        if (!translations[lang]) return;
        currentLanguage = lang;
        document.documentElement.lang = lang === 'zh' ? 'zh-TW' : 'en';

        // Update button styles
        document.getElementById('lang-zh').classList.toggle('active-lang', lang === 'zh');
        document.getElementById('lang-en').classList.toggle('active-lang', lang === 'en');

        // Translate all elements with an ID
        const langData = translations[lang];
        document.querySelectorAll('[id]').forEach(element => {
            const key = element.id;
            if (langData[key]) {
                // Use innerHTML for elements that might contain other elements like tooltips
                // and textContent for simple text nodes or buttons.
                if (element.querySelector('.tooltip')) {
                     // This logic assumes the text node is the first child
                    element.childNodes[0].nodeValue = langData[key];
                } else {
                    element.textContent = langData[key];
                }
            }
        });
        
        // Update dynamic content like model presets
        populateModelPresets();
    }
    
    document.getElementById('lang-zh').addEventListener('click', () => setLanguage('zh'));
    document.getElementById('lang-en').addEventListener('click', () => setLanguage('en'));


    // --- 頁籤切換邏輯 ---
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetTab = button.dataset.tab;
            tabButtons.forEach(btn => {
                btn.classList.remove('active-tab', 'text-indigo-600', 'dark:text-indigo-400', 'border-indigo-500');
                btn.classList.add('inactive-tab', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300', 'dark:text-gray-400', 'dark:hover:text-gray-300', 'dark:hover:border-gray-500');
            });
            button.classList.add('active-tab', 'text-indigo-600', 'dark:text-indigo-400', 'border-indigo-500');
            button.classList.remove('inactive-tab', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300', 'dark:text-gray-400', 'dark:hover:text-gray-300', 'dark:hover:border-gray-500');
            tabContents.forEach(content => {
                content.id === targetTab ? content.classList.remove('hidden') : content.classList.add('hidden');
            });
        });
    });
    
    // --- 通用函式 ---
    function animateValue(element, start, end, duration, unit = '', isCurrency = false, isDuration = false) {
         if (!element) return;
        let startTimestamp = null;
        const step = timestamp => {
            if (!startTimestamp) startTimestamp = timestamp;
            const progress = Math.min((timestamp - startTimestamp) / duration, 1);
            const currentValue = progress * (end - start) + start;
            if (isCurrency) {
                element.textContent = `$${Math.floor(currentValue).toLocaleString('en-US')}`;
            } else if (isDuration) {
                const years = currentValue / 365;
                const days = currentValue;
                const unitYears = translations[currentLanguage].unit_years;
                const unitDays = translations[currentLanguage].unit_days;
                element.textContent = currentValue < 365 ? `${days.toFixed(2)} ${unitDays}` : `${years.toFixed(2)} ${unitYears}`;
            } else {
                element.innerHTML = `${currentValue.toFixed(2)} <span class="text-base font-normal">${unit}</span>`;
            }
            if (progress < 1) {
                window.requestAnimationFrame(step);
            }
        };
        window.requestAnimationFrame(step);
    }

    // --- 工具 1: AI 晶片 LCA 評估邏輯 ---
    const lcaResultsContainerEl = document.getElementById('lca-results-container');
    const gpuData = {
        "A100": { tdp_watt: 400, cradle_to_gate_kg: 120, water_L_per_year: [1000, 6000], e_waste_kg: 2.5 },
        "H100": { tdp_watt: 700, cradle_to_gate_kg: 164, water_L_per_year: [2000, 8000], e_waste_kg: 3 },
        "B200": { tdp_watt: 1100, cradle_to_gate_kg: 284, water_L_per_year: [3500, 10000], e_waste_kg: 2.5 },
        "B300": { tdp_watt: 1300, cradle_to_gate_kg: 300, water_L_per_year: [3500, 15000], e_waste_kg: 3.5 }
    };
    
    let carbonChartInstance = null;
    
    function updateChart(operational, embodied) {
        const ctx = document.getElementById('carbonChart').getContext('2d');
        if (carbonChartInstance) carbonChartInstance.destroy();
        const langData = translations[currentLanguage];
        carbonChartInstance = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: [langData.chart_op_label, langData.chart_em_label],
                datasets: [{ data: [operational, embodied], backgroundColor: ['#3B82F6', '#14B8A6'], borderColor: document.body.classList.contains('dark') ? '#1f2937' : '#FFFFFF', borderWidth: 4 }]
            },
            options: {
                responsive: true, cutout: '70%',
                plugins: {
                    legend: { position: 'bottom', labels: { color: document.body.classList.contains('dark') ? '#D1D5DB' : '#4B5563' } },
                    title: { display: true, text: langData.chart_title, color: document.body.classList.contains('dark') ? '#F9FAFB' : '#1F2937', font: { size: 16 } }
                }
            },
        });
    }

    function runLcaCalculation() {
        const gpuChip = document.getElementById('gpuChip').value;
        const lifespan = parseFloat(document.getElementById('lifespan').value);
        const utilization = parseFloat(document.getElementById('utilization').value);
        const carbonIntensity = parseFloat(document.getElementById('carbonIntensity').value);

        if (isNaN(lifespan) || isNaN(utilization) || isNaN(carbonIntensity) || lifespan <= 0 || utilization < 0 || utilization > 24 || carbonIntensity <= 0) {
            alert(translations[currentLanguage].alert_invalid_input);
            return;
        }

        const data = gpuData[gpuChip];
        const totalHours = lifespan * 365 * utilization;
        const totalKWH = (data.tdp_watt * totalHours) / 1000;
        const operationalCo2 = (totalKWH * carbonIntensity) / 1000;
        const embodiedCo2 = data.cradle_to_gate_kg / 1000;
        const totalCo2 = operationalCo2 + embodiedCo2;
        const avgWater = (data.water_L_per_year[0] + data.water_L_per_year[1]) / 2;
        const totalWater = avgWater * lifespan;
        const eWaste = data.e_waste_kg;

        document.getElementById('totalCo2').innerHTML = `${totalCo2.toFixed(2)} <span class="text-base font-normal">tCO₂eq</span>`;
        document.getElementById('operationalCo2').innerHTML = `${operationalCo2.toFixed(2)} <span class="text-base font-normal">tCO₂eq</span>`;
        document.getElementById('embodiedCo2').innerHTML = `${embodiedCo2.toFixed(2)} <span class="text-base font-normal">tCO₂eq</span>`;
        document.getElementById('waterConsumption').innerHTML = `${totalWater.toFixed(0).toLocaleString('en-US')} <span class="text-base font-normal">L</span>`;
        document.getElementById('eWaste').innerHTML = `${eWaste.toFixed(2)} <span class="text-base font-normal">kg</span>`;
        
        updateChart(operationalCo2, embodiedCo2);

        const equivalentsContainer = document.getElementById('lca-equivalents');
        equivalentsContainer.innerHTML = '';
        const lcaDailyEquivalents = equivalentsData[currentLanguage].lca;
        for (const key in lcaDailyEquivalents) {
            const item = lcaDailyEquivalents[key];
            const equivalentAmount = totalCo2 / item.value;
            equivalentsContainer.innerHTML += `<div class="bg-white dark:bg-gray-700 p-3 rounded-lg text-center transition duration-300 ease-in-out shadow-sm hover:shadow-lg transform hover:-translate-y-1 border dark:border-gray-600"><div class="tooltip"><span class="text-3xl">${item.icon}</span><span class="tooltiptext">${item.tooltip} Emissions: ${item.value.toFixed(4).replace(/0+$/, '').replace(/\.$/, '')} tCO₂eq</span></div><p class="text-xl font-bold text-gray-800 dark:text-gray-200 mt-2">${Math.round(equivalentAmount).toLocaleString('en-US')}</p><p class="text-xs text-gray-600 dark:text-gray-400 mt-1">${item.name}</p></div>`;
        }
    }
    
    document.getElementById('calculateLcaBtn').addEventListener('click', runLcaCalculation);

    // --- 工具 2: LLM 訓練碳排計算器邏輯 ---
    const modelPresetSelect = document.getElementById('modelPreset');
    const modelTypeSelect = document.getElementById('modelType');
    const baseModelParamsContainer = document.getElementById('baseModelParamsContainer');
    const deviceTypeSelect = document.getElementById('deviceType');
    
    const modelPresets = {
        'GPT3': { name: 'GPT-3 (175B)', type: 'dense', params: 175, baseParams: '', tokens: 300, deviceType: 'V100', deviceNum: 10000 },
        'GPT4': { name: 'GPT-4 (1.8T)', type: 'MoE', params: 1800, baseParams: 111, tokens: 13000, deviceType: 'A100', deviceNum: 25000 },
        'custom': { name: 'Custom Model' },
    };
    const hardwarePresets = {
        'V100': { peakTFLOPs: 125, systemPower: 330 }, 'A100': { peakTFLOPs: 312, systemPower: 550 },
        'H100': { peakTFLOPs: 1979, systemPower: 800 }, 'TPUv3': { peakTFLOPs: 123, systemPower: 288 },
        'TPUv4': { peakTFLOPs: 275, systemPower: 250 }, 'custom': { peakTFLOPs: 125, systemPower: 330 }
    };

    function populateModelPresets() {
        modelPresetSelect.innerHTML = ''; // Clear existing options
        for (const key in modelPresets) {
            const option = document.createElement('option');
            option.value = key;
            if (key === 'custom') {
                option.textContent = translations[currentLanguage].model_preset_custom_name;
            } else {
                option.textContent = modelPresets[key].name;
            }
            modelPresetSelect.appendChild(option);
        }
    }

    function updateTrainingForm() {
        const selectedModelKey = modelPresetSelect.value;
        const preset = modelPresets[selectedModelKey];
        const isCustom = selectedModelKey === 'custom';

        if (!isCustom) {
            modelTypeSelect.value = preset.type;
            document.getElementById('parametersB').value = preset.params;
            document.getElementById('tokensB').value = preset.tokens;
            deviceTypeSelect.value = preset.deviceType;
            document.getElementById('deviceNum').value = preset.deviceNum;
            document.getElementById('systemPower').value = (hardwarePresets[preset.deviceType] || hardwarePresets['custom']).systemPower;
            if (preset.type === 'MoE') {
                document.getElementById('baseModelParamsB').value = preset.baseParams;
            } else {
                document.getElementById('baseModelParamsB').value = '';
            }
        }
        
        document.getElementById('modelType').disabled = !isCustom;
        document.getElementById('parametersB').disabled = !isCustom;
        document.getElementById('baseModelParamsB').disabled = !isCustom;
        document.getElementById('tokensB').disabled = !isCustom;
        
        baseModelParamsContainer.classList.toggle('hidden', modelTypeSelect.value !== 'MoE');
    }

    modelPresetSelect.addEventListener('change', updateTrainingForm);
    
    deviceTypeSelect.addEventListener('change', () => {
         document.getElementById('systemPower').value = (hardwarePresets[deviceTypeSelect.value] || hardwarePresets['custom']).systemPower;
    });
    
    function runTrainingCalculation() {
        const inputs = {
            modelType: modelTypeSelect.value,
            parametersB: parseFloat(document.getElementById('parametersB').value),
            baseModelParamsB: parseFloat(document.getElementById('baseModelParamsB').value),
            tokensB: parseFloat(document.getElementById('tokensB').value),
            deviceType: deviceTypeSelect.value,
            deviceNum: parseInt(document.getElementById('deviceNum').value),
            systemPower: parseFloat(document.getElementById('systemPower').value),
            hardwareEfficiency: parseFloat(document.getElementById('hardwareEfficiency').value),
            pue: parseFloat(document.getElementById('pue').value),
            co2eqkwh: parseFloat(document.getElementById('trainingCo2eqkwh').value),
            gpuCostPerHour: parseFloat(document.getElementById('gpuCostPerHour').value),
        };

        let isValid = true;
        for (const key in inputs) {
            if (inputs.modelType === 'dense' && key === 'baseModelParamsB') continue;
            if (['modelType', 'deviceType'].includes(key)) continue;
            if (isNaN(inputs[key])) { isValid = false; break; }
            if (inputs[key] <= 0 && key !== 'baseModelParamsB') { isValid = false; break; }
        }
        if (inputs.modelType === 'MoE' && (isNaN(inputs.baseModelParamsB) || inputs.baseModelParamsB <= 0)) {
            isValid = false;
        }

        if (!isValid) {
            alert(translations[currentLanguage].alert_invalid_input);
            return;
        }

        const activeParamsB = inputs.modelType === 'MoE' ? inputs.baseModelParamsB : inputs.parametersB;
        const totalFLOPs = 6 * activeParamsB * 1e9 * inputs.tokensB * 1e9;
        const TFLOPsPerSecond = hardwarePresets[inputs.deviceType].peakTFLOPs * (inputs.hardwareEfficiency / 100);
        const trainingSeconds = totalFLOPs / (inputs.deviceNum * TFLOPsPerSecond * 1e12);
        const trainingDays = trainingSeconds / 86400;
        const totalPowerKW = (inputs.systemPower * inputs.deviceNum) / 1000;
        const totalEnergyKWh = totalPowerKW * (trainingDays * 24) * inputs.pue;
        
        const results = {
            operationalCo2: (totalEnergyKWh * inputs.co2eqkwh) / 1000,
            trainingDays: trainingDays,
            totalEnergyMWh: totalEnergyKWh / 1000,
            trainingCost: trainingDays * 24 * inputs.deviceNum * inputs.gpuCostPerHour,
        };
        
        animateValue(document.getElementById('operationalCo2Display'), 0, results.operationalCo2, 500, 'tCO₂eq');
        animateValue(document.getElementById('totalEnergyMWhDisplay'), 0, results.totalEnergyMWh, 500, 'MWh');
        animateValue(document.getElementById('trainingCostDisplay'), 0, results.trainingCost, 500, '', true);
        animateValue(document.getElementById('trainingDurationDisplay'), 0, results.trainingDays, 500, '', false, true);
        
        const equivalentsContainer = document.getElementById('training-equivalents');
        equivalentsContainer.innerHTML = '';
        const trainingDailyEquivalents = equivalentsData[currentLanguage].training;
        for (const key in trainingDailyEquivalents) {
            const item = trainingDailyEquivalents[key];
            const equivalentAmount = results.operationalCo2 / item.value;
            equivalentsContainer.innerHTML += `<div class="bg-white dark:bg-gray-700 p-3 rounded-lg text-center transition duration-300 ease-in-out shadow-sm hover:shadow-lg transform hover:-translate-y-1 border dark:border-gray-600"><div class="tooltip"><span class="text-3xl">${item.icon}</span><span class="tooltiptext">${item.tooltip} Emissions: ${item.value.toFixed(4).replace(/0+$/, '').replace(/\.$/, '')} tCO₂eq</span></div><p class="text-xl font-bold text-gray-800 dark:text-gray-200 mt-2">${Math.round(equivalentAmount).toLocaleString('en-US')}</p><p class="text-xs text-gray-600 dark:text-gray-400 mt-1">${item.name}</p></div>`;
        }
    }
    
    document.getElementById('calculateTrainingBtn').addEventListener('click', runTrainingCalculation);


    // --- 工具 3: LLM 推論碳排計算器邏輯 ---
    const infModelPresetSelect = document.getElementById('inf-modelPreset');
    const infCustomModelSection = document.getElementById('inf-customModelSection');
    const infModelTypeSelect = document.getElementById('inf-modelType');
    const infBaseModelParamsContainer = document.getElementById('inf-baseModelParamsContainer');
    const infDeviceTypeSelect = document.getElementById('inf-deviceType');
    
    const infModelPresets = {
        'GPT3': { parametersB: 175, type: 'dense', baseModelParamsB: null, deviceType: 'A100', deviceNum: 8, systemPower: 550 },
        'GPT4': { parametersB: 1800, type: 'MoE', baseModelParamsB: 200, deviceType: 'A100', deviceNum: 16, systemPower: 550 },
        'custom': { parametersB: 175, type: 'dense', baseModelParamsB: null, deviceType: 'V100', deviceNum: 1, systemPower: 330 }
    };
    const infHardwarePresets = {
        'V100': { peakTFLOPs: 125, systemPower: 330 }, 'H100': { peakTFLOPs: 1979, systemPower: 800 },
        'A100': { peakTFLOPs: 312, systemPower: 550 }, 'TPUv3': { peakTFLOPs: 123, systemPower: 288 },
        'TPUv4': { peakTFLOPs: 275, systemPower: 250 }, 'custom': { peakTFLOPs: 125, systemPower: 330 }
    };
    
    function updateInferenceForm() {
        const presetKey = infModelPresetSelect.value;
        const isCustom = presetKey === 'custom';
        const model = infModelPresets[presetKey];

        document.getElementById('inf-parametersB').value = model.parametersB;
        infModelTypeSelect.value = model.type;
        if (model.type === 'MoE') {
            document.getElementById('inf-baseModelParamsB').value = model.baseModelParamsB;
        }
        infDeviceTypeSelect.value = model.deviceType;
        document.getElementById('inf-deviceNum').value = model.deviceNum;
        document.getElementById('inf-systemPower').value = model.systemPower;
        
        infCustomModelSection.classList.toggle('hidden', !isCustom);
        document.getElementById('inf-modelType').disabled = !isCustom;
        document.getElementById('inf-parametersB').disabled = !isCustom;
        document.getElementById('inf-baseModelParamsB').disabled = !isCustom;
        
        infBaseModelParamsContainer.classList.toggle('hidden', infModelTypeSelect.value !== 'MoE');
    }

    infModelPresetSelect.addEventListener('change', updateInferenceForm);
    
    infDeviceTypeSelect.addEventListener('change', () => {
        if (infDeviceTypeSelect.value !== 'custom') {
            document.getElementById('inf-systemPower').value = infHardwarePresets[infDeviceTypeSelect.value].systemPower;
        }
    });
    
    function runInferenceCalculation() {
        const inputs = {
            modelType: infModelTypeSelect.value,
            parametersB: parseFloat(document.getElementById('inf-parametersB').value),
            baseModelParamsB: parseFloat(document.getElementById('inf-baseModelParamsB').value),
            tokensT: parseFloat(document.getElementById('inf-tokensT').value),
            deviceType: infDeviceTypeSelect.value,
            deviceNum: parseInt(document.getElementById('inf-deviceNum').value),
            systemPower: parseFloat(document.getElementById('inf-systemPower').value),
            hardwareEfficiency: parseFloat(document.getElementById('inf-hardwareEfficiency').value),
            pue: parseFloat(document.getElementById('inf-pue').value),
            co2eqkwh: parseFloat(document.getElementById('inf-co2eqkwh').value),
        };

        let isValid = true;
        for (const key in inputs) {
            if (key === 'baseModelParamsB' && inputs.modelType !== 'MoE') continue;
            if (['modelType', 'deviceType'].includes(key)) continue;
            if (isNaN(inputs[key])) { isValid = false; break; }
            if (inputs[key] < 0) { isValid = false; break; }
        }
         if (inputs.pue < 1) { isValid = false; }
         if (inputs.deviceNum < 1) { isValid = false; }
        
        if(!isValid) {
            alert(translations[currentLanguage].alert_invalid_input);
            return;
        }

        const activeParamsB = inputs.modelType === 'MoE' ? inputs.baseModelParamsB : inputs.parametersB;
        const totalZettaFLOPs = 2 * activeParamsB * inputs.tokensT;
        const totalFLOPs = totalZettaFLOPs * 1e21;
        const TFLOPsPerSecond = infHardwarePresets[inputs.deviceType].peakTFLOPs * (inputs.hardwareEfficiency / 100);
        const inferenceSeconds = totalFLOPs / (inputs.deviceNum * TFLOPsPerSecond * 1e12);
        const totalPowerKW = (inputs.systemPower * inputs.deviceNum) / 1000;
        const totalEnergyKWh = totalPowerKW * (inferenceSeconds / 3600) * inputs.pue;
        const results = { totalCo2_g: totalEnergyKWh * inputs.co2eqkwh, totalEnergyKWh, totalTimeSeconds: inferenceSeconds };
        
        document.getElementById('inf-totalCo2').textContent = results.totalCo2_g.toFixed(4);
        
        const { totalTimeSeconds } = results;
        let timeString;
        const langData = translations[currentLanguage];
        if (totalTimeSeconds < 1) timeString = `${(totalTimeSeconds * 1000).toFixed(2)} ${langData.unit_ms}`;
        else if (totalTimeSeconds < 60) timeString = `${totalTimeSeconds.toFixed(2)} ${langData.unit_s}`;
        else if (totalTimeSeconds < 3600) timeString = `${(totalTimeSeconds / 60).toFixed(2)} ${langData.unit_min}`;
        else timeString = `${(totalTimeSeconds / 3600).toFixed(2)} ${langData.unit_hr}`;
        document.getElementById('inf-timeDisplay').textContent = timeString;
        
        document.getElementById('inf-energyDisplay').textContent = `${(results.totalEnergyKWh * 1000).toFixed(2)} Wh`;
        
        const equivalentsContainer = document.getElementById('inf-equivalents');
        equivalentsContainer.innerHTML = '';
        const infDailyEquivalents_g = equivalentsData[currentLanguage].inference;
        for (const key in infDailyEquivalents_g) {
            const item = infDailyEquivalents_g[key];
            const equivalentAmount = results.totalCo2_g / item.value;
            const formattedAmount = equivalentAmount < 1 && equivalentAmount > 0 ? equivalentAmount.toFixed(4) : Math.round(equivalentAmount).toLocaleString('en-US');
            equivalentsContainer.innerHTML += `<div class="bg-white dark:bg-gray-700 p-3 rounded-lg text-center transition duration-300 ease-in-out shadow-sm hover:shadow-lg transform hover:-translate-y-1 border dark:border-gray-600"><div class="tooltip"><span class="text-3xl">${item.icon}</span><span class="tooltiptext">${item.tooltip} Emissions: ${item.value.toFixed(4).replace(/0+$/, '').replace(/\.$/, '')} gCO₂eq</span></div><p class="text-xl font-bold text-gray-800 dark:text-gray-200 mt-2">${formattedAmount}</p><p class="text-xs text-gray-600 dark:text-gray-400 mt-1">${item.name}</p></div>`;
        }
    }

    document.getElementById('calculateInferenceBtn').addEventListener('click', runInferenceCalculation);
    
    // --- Initial Setup ---
    setLanguage('zh'); // Set default language
    updateTrainingForm();
    updateInferenceForm();
    document.querySelectorAll('.results-container').forEach(container => {
        container.style.opacity = '1';
    });
});
